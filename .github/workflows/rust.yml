name: Rust

on:
  workflow_diname: 编译

on:
  #schedule:
    #- cron: '0 3,20 * * *'
  workflow_dispatch:
env:
  TZ: Asia/Shanghai
jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      ver: ${{ steps.getversion.outputs.ver }}
      cver: ${{ steps.getversion.outputs.cver }}
    steps:
      -
        name: 检查更新
        id: getversion
        run: |
          ver=`curl https://api.github.com/repos/lbl8603/vnt/releases/latest | jq -r '.tag_name'`
          #vntsv=`curl https://api.github.com/repos/lbl8603/vnts/releases/latest | grep 'tag_name' | cut -d\" -f4`
          cver=`curl https://api.github.com/repos/lmq8267/vnt-cl/releases/latest | jq -r '.tag_name'`
          echo "ver=${ver}" >> $GITHUB_OUTPUT
          echo "cver=${cver}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: check
    if: ${{ needs.check.outputs.ver != needs.check.outputs.cver }}
    steps:
      -
        name: 检查代码仓库
        uses: actions/checkout@v3
      - name: Init submodules
        uses: snickerbockers/submodules-init@v4
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-mipsel-unknown-linux-musl
      - name: List
        run: find ./
      - 
        name: 编译
        run: |
          mkdir -p ./musl_gcc 
          wget -c https://musl.cc/mipsel-linux-musl-cross.tgz -P ./musl_gcc/
          tar zxf ./musl_gcc/mipsel-linux-musl-cross.tgz -C ./musl_gcc/
          sudo ln -s $(pwd)/musl_gcc/mipsel-linux-musl-cross/bin/*gcc /usr/bin/
          rustup target add mipsel-unknown-linux-musl
          cat >>~/.cargo/config <<EOF
          [target.mipsel-unknown-linux-musl]
          linker = "mipsel-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          EOF
          git clone https://github.com/lbl8603/vnt.git /opt/vnt
          git clone https://github.com/lmq8267/cloudflared.git /opt/st
          tar -xvf /opt/st/upx-3.95-amd64_linux.tar.xz -C /opt
          chmod 777 /opt/upx-3.95-amd64_linux/upx
          chmod 777 /opt/st/strip
          mkdir -p /opt/vnt-mipsel
          cd /opt/vnt
          cargo build --package vnt-cli --target=mipsel-unknown-linux-musl --release --no-default-features
          cp -f /opt/vnt/target/mipsel-unknown-linux-musl/release/vnt-cli /opt/vnt-mipsel/vnt-cli
           cd /opt/vnt-mipsel
          /opt/st/strip /opt/vnt-mipsel/vnt-cli
          /opt/upx-3.95-amd64_linux/upx --lzma --best vnt-cli
          echo $(md5sum vnt-cli | awk '{print $1;}') >MD5.txt
          echo "build_time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
      - 
        name: 发布
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.c8 }}
          body: |
           > ### 编译时间 ：${{ env.build_time }}

           测试
          tag_name: ${{ needs.check.outputs.ver }}
          files: |
              /opt/vnt-mipsel/vnt-cli
              /opt/vnt-mipsel/MD5.txt
      - 
       name: 删除工作流
       uses: GitRML/delete-workflow-runs@main
       with:
        token: ${{ secrets.c8 }}
        retain_days: 2
        keep_minimum_runs: 0spatch:

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  #  test:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Init submodules
  #        uses: snickerbockers/submodules-init@v4
  #      - name: Cargo cache
  #        uses: actions/cache@v2
  #        with:
  #          path: |
  #            ~/.cargo/registry
  #            ./target
  #          key: test-cargo-registry
  #      - name: List
  #        run: find ./
  #      - name: Run tests
  #        run: cargo test --verbose

  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        # 选择使用openssl或者ring，并不是所有平台都支持
        include:
          - TARGET: i686-unknown-linux-musl # test in an alpine container on a mac
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: x86_64-unknown-linux-musl # test in an alpine container on a mac
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored
          - TARGET: aarch64-unknown-linux-musl # tested on aws t4g.nano in alpine container
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: armv7-unknown-linux-musleabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
            FEATURES: openssl-vendored
          - TARGET: arm-unknown-linux-musleabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest
            FEATURES: openssl-vendored
          - TARGET: x86_64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
            OS: macos-latest
            FEATURES: ring-cipher,openssl-vendored
          - TARGET: aarch64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
            OS: macos-latest
            FEATURES: ring-cipher,openssl-vendored
          - TARGET: i686-pc-windows-msvc # tested on a windows machine
            OS: windows-2019
            FEATURES: ring-cipher,openssl-vendored
          - TARGET: x86_64-pc-windows-msvc # tested on a windows machine
            OS: windows-latest
            FEATURES: ring-cipher,openssl-vendored
          - TARGET: mipsel-unknown-linux-musl # openwrt
            OS: ubuntu-latest
            FEATURES: openssl-vendored
          - TARGET: mips-unknown-linux-musl # openwrt
            OS: ubuntu-latest
            FEATURES: openssl-vendored
    # needs: test
    runs-on: ${{ matrix.OS }}
    env:
      NAME: vnt-cli # change with the name of your project
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      FEATURES: ${{ matrix.FEATURES }}
    steps:
      - uses: actions/checkout@v2
      - name: Init submodules
        uses: snickerbockers/submodules-init@v4
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: Use strawberry perl
        if: startsWith(matrix.os, 'windows')
        run: echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV
      - name: List
        run: find ./
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get update && sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf musl-tools
            #  curl -s musl.cc | grep mipsel
            case $TARGET in 
              mipsel-unknown-linux-musl)
                MUSL_URI=mipsel-linux-musl-cross
                ;;
              aarch64-unknown-linux-musl)
                MUSL_URI=aarch64-linux-musl-cross
                ;;
              armv7-unknown-linux-musleabihf)
                MUSL_URI=armv7l-linux-musleabihf-cross
                ;;   
              arm-unknown-linux-musleabihf)
                MUSL_URI=arm-linux-musleabihf-cross
                ;;        
              mips-unknown-linux-musl)
                MUSL_URI=mips-linux-musl-cross
                ;;
            esac
          
            if [  -n "$MUSL_URI" ]; then
              mkdir -p ./musl_gcc 
              wget -c https://musl.cc/$MUSL_URI.tgz -P ./musl_gcc/
              tar zxf ./musl_gcc/$MUSL_URI.tgz -C ./musl_gcc/
              sudo ln -s $(pwd)/musl_gcc/$MUSL_URI/bin/*gcc /usr/bin/
            fi
          fi
          
          
          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.x86_64-unknown-linux-musl]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.armv7-unknown-linux-musleabihf]
          linker = "armv7l-linux-musleabihf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-musleabihf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.mipsel-unknown-linux-musl]
          linker = "mipsel-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.mips-unknown-linux-musl]
          linker = "mips-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.x86_64-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]    
          [target.i686-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]      
          [target.x86_64-apple-darwin]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"] 
          [target.aarch64-apple-darwin]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]     
          [target.i686-unknown-linux-musl]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]    
          EOF
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build
        run: cargo build --package vnt-cli --release --verbose --target $TARGET --features $FEATURES
      - name: List target
        run: find ./target
      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
          else
              EXEC=$NAME
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/$EXEC ./artifacts/$EXEC
          tar -czf ./artifacts/$NAME-$TARGET-$TAG.tar.gz -C ./artifacts $EXEC
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: vnt-cli
          path: |
            ./artifacts
  # deploys to github releases on tag
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: vnt-cli
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifacts/*.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
